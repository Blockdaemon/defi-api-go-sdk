/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Action type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Action{}

// Action Details about an action performed in a step of a route.
type Action struct {
	From TokenAmount `json:"from"`
	To TokenAmount `json:"to"`
	// The maximum allowed price slippage for a transaction, expressed as a fraction of 100.
	Slippage float32 `json:"slippage"`
	FromAccount Account `json:"fromAccount"`
	ToAccount Account `json:"toAccount"`
}

type _Action Action

// NewAction instantiates a new Action object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAction(from TokenAmount, to TokenAmount, slippage float32, fromAccount Account, toAccount Account) *Action {
	this := Action{}
	this.From = from
	this.To = to
	this.Slippage = slippage
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	return &this
}

// NewActionWithDefaults instantiates a new Action object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionWithDefaults() *Action {
	this := Action{}
	var slippage float32 = 0.01
	this.Slippage = slippage
	return &this
}

// GetFrom returns the From field value
func (o *Action) GetFrom() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *Action) GetFromOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *Action) SetFrom(v TokenAmount) {
	o.From = v
}

// GetTo returns the To field value
func (o *Action) GetTo() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Action) GetToOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Action) SetTo(v TokenAmount) {
	o.To = v
}

// GetSlippage returns the Slippage field value
func (o *Action) GetSlippage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Slippage
}

// GetSlippageOk returns a tuple with the Slippage field value
// and a boolean to check if the value has been set.
func (o *Action) GetSlippageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slippage, true
}

// SetSlippage sets field value
func (o *Action) SetSlippage(v float32) {
	o.Slippage = v
}

// GetFromAccount returns the FromAccount field value
func (o *Action) GetFromAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *Action) GetFromAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *Action) SetFromAccount(v Account) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *Action) GetToAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *Action) GetToAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *Action) SetToAccount(v Account) {
	o.ToAccount = v
}

func (o Action) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Action) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	toSerialize["slippage"] = o.Slippage
	toSerialize["fromAccount"] = o.FromAccount
	toSerialize["toAccount"] = o.ToAccount
	return toSerialize, nil
}

func (o *Action) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
		"slippage",
		"fromAccount",
		"toAccount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAction := _Action{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAction)

	if err != nil {
		return err
	}

	*o = Action(varAction)

	return err
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


