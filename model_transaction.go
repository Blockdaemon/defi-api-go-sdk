/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction Details about a single transaction.
type Transaction struct {
	// A timestamp represented in ISO 8601 format.
	Timestamp time.Time `json:"timestamp"`
	Type TransactionType `json:"type"`
	// The unique identifier of a blockchain in CAIP-2 notation.
	ChainID string `json:"chainID" validate:"regexp=^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$"`
	// The number of a block.
	BlockNumber int32 `json:"blockNumber"`
	// The hash of a transaction or block.
	BlockHash string `json:"blockHash"`
	// The hash of a transaction or block.
	TxHash string `json:"txHash"`
	// A link to a block explorer for a transaction or address.
	ExplorerLink string `json:"explorerLink"`
	Status TransactionStatus `json:"status"`
	// A link to the Tenderly Explorer for a transaction.
	Tenderly *string `json:"tenderly,omitempty"`
	FromAccount Account `json:"fromAccount"`
	ToAccount Account `json:"toAccount"`
	TokenAmount TokenAmount `json:"tokenAmount"`
	GasDetails GasDetails `json:"gasDetails"`
	// The CAIP-2 identifier for a blockchain.
	Transfers []Transfer `json:"transfers"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(timestamp time.Time, type_ TransactionType, chainID string, blockNumber int32, blockHash string, txHash string, explorerLink string, status TransactionStatus, fromAccount Account, toAccount Account, tokenAmount TokenAmount, gasDetails GasDetails, transfers []Transfer) *Transaction {
	this := Transaction{}
	this.Timestamp = timestamp
	this.Type = type_
	this.ChainID = chainID
	this.BlockNumber = blockNumber
	this.BlockHash = blockHash
	this.TxHash = txHash
	this.ExplorerLink = explorerLink
	this.Status = status
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	this.TokenAmount = tokenAmount
	this.GasDetails = gasDetails
	this.Transfers = transfers
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *Transaction) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Transaction) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetType returns the Type field value
func (o *Transaction) GetType() TransactionType {
	if o == nil {
		var ret TransactionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*TransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transaction) SetType(v TransactionType) {
	o.Type = v
}

// GetChainID returns the ChainID field value
func (o *Transaction) GetChainID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainID
}

// GetChainIDOk returns a tuple with the ChainID field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetChainIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainID, true
}

// SetChainID sets field value
func (o *Transaction) SetChainID(v string) {
	o.ChainID = v
}

// GetBlockNumber returns the BlockNumber field value
func (o *Transaction) GetBlockNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNumber, true
}

// SetBlockNumber sets field value
func (o *Transaction) SetBlockNumber(v int32) {
	o.BlockNumber = v
}

// GetBlockHash returns the BlockHash field value
func (o *Transaction) GetBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHash, true
}

// SetBlockHash sets field value
func (o *Transaction) SetBlockHash(v string) {
	o.BlockHash = v
}

// GetTxHash returns the TxHash field value
func (o *Transaction) GetTxHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxHash, true
}

// SetTxHash sets field value
func (o *Transaction) SetTxHash(v string) {
	o.TxHash = v
}

// GetExplorerLink returns the ExplorerLink field value
func (o *Transaction) GetExplorerLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExplorerLink
}

// GetExplorerLinkOk returns a tuple with the ExplorerLink field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetExplorerLinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExplorerLink, true
}

// SetExplorerLink sets field value
func (o *Transaction) SetExplorerLink(v string) {
	o.ExplorerLink = v
}

// GetStatus returns the Status field value
func (o *Transaction) GetStatus() TransactionStatus {
	if o == nil {
		var ret TransactionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transaction) SetStatus(v TransactionStatus) {
	o.Status = v
}

// GetTenderly returns the Tenderly field value if set, zero value otherwise.
func (o *Transaction) GetTenderly() string {
	if o == nil || IsNil(o.Tenderly) {
		var ret string
		return ret
	}
	return *o.Tenderly
}

// GetTenderlyOk returns a tuple with the Tenderly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTenderlyOk() (*string, bool) {
	if o == nil || IsNil(o.Tenderly) {
		return nil, false
	}
	return o.Tenderly, true
}

// HasTenderly returns a boolean if a field has been set.
func (o *Transaction) HasTenderly() bool {
	if o != nil && !IsNil(o.Tenderly) {
		return true
	}

	return false
}

// SetTenderly gets a reference to the given string and assigns it to the Tenderly field.
func (o *Transaction) SetTenderly(v string) {
	o.Tenderly = &v
}

// GetFromAccount returns the FromAccount field value
func (o *Transaction) GetFromAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetFromAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *Transaction) SetFromAccount(v Account) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *Transaction) GetToAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetToAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *Transaction) SetToAccount(v Account) {
	o.ToAccount = v
}

// GetTokenAmount returns the TokenAmount field value
func (o *Transaction) GetTokenAmount() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.TokenAmount
}

// GetTokenAmountOk returns a tuple with the TokenAmount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTokenAmountOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAmount, true
}

// SetTokenAmount sets field value
func (o *Transaction) SetTokenAmount(v TokenAmount) {
	o.TokenAmount = v
}

// GetGasDetails returns the GasDetails field value
func (o *Transaction) GetGasDetails() GasDetails {
	if o == nil {
		var ret GasDetails
		return ret
	}

	return o.GasDetails
}

// GetGasDetailsOk returns a tuple with the GasDetails field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetGasDetailsOk() (*GasDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasDetails, true
}

// SetGasDetails sets field value
func (o *Transaction) SetGasDetails(v GasDetails) {
	o.GasDetails = v
}

// GetTransfers returns the Transfers field value
func (o *Transaction) GetTransfers() []Transfer {
	if o == nil {
		var ret []Transfer
		return ret
	}

	return o.Transfers
}

// GetTransfersOk returns a tuple with the Transfers field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransfersOk() ([]Transfer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transfers, true
}

// SetTransfers sets field value
func (o *Transaction) SetTransfers(v []Transfer) {
	o.Transfers = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["type"] = o.Type
	toSerialize["chainID"] = o.ChainID
	toSerialize["blockNumber"] = o.BlockNumber
	toSerialize["blockHash"] = o.BlockHash
	toSerialize["txHash"] = o.TxHash
	toSerialize["explorerLink"] = o.ExplorerLink
	toSerialize["status"] = o.Status
	if !IsNil(o.Tenderly) {
		toSerialize["tenderly"] = o.Tenderly
	}
	toSerialize["fromAccount"] = o.FromAccount
	toSerialize["toAccount"] = o.ToAccount
	toSerialize["tokenAmount"] = o.TokenAmount
	toSerialize["gasDetails"] = o.GasDetails
	toSerialize["transfers"] = o.Transfers
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"type",
		"chainID",
		"blockNumber",
		"blockHash",
		"txHash",
		"explorerLink",
		"status",
		"fromAccount",
		"toAccount",
		"tokenAmount",
		"gasDetails",
		"transfers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


