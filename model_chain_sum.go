/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChainSum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainSum{}

// ChainSum The sum of approved values for all tokens on a specific chain.
type ChainSum struct {
	// The unique identifier of a blockchain in CAIP-2 notation.
	ChainId string `json:"chainId" validate:"regexp=^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$"`
	// The amount of a token represented as a string.
	ApprovedSum string `json:"approvedSum" validate:"regexp=^([1-9][0-9]*|0)(\\\\.[0-9]+)?$"`
	// The amount of a token represented as a string.
	ValueAtRiskSum string `json:"valueAtRiskSum" validate:"regexp=^([1-9][0-9]*|0)(\\\\.[0-9]+)?$"`
}

type _ChainSum ChainSum

// NewChainSum instantiates a new ChainSum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainSum(chainId string, approvedSum string, valueAtRiskSum string) *ChainSum {
	this := ChainSum{}
	this.ChainId = chainId
	this.ApprovedSum = approvedSum
	this.ValueAtRiskSum = valueAtRiskSum
	return &this
}

// NewChainSumWithDefaults instantiates a new ChainSum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainSumWithDefaults() *ChainSum {
	this := ChainSum{}
	return &this
}

// GetChainId returns the ChainId field value
func (o *ChainSum) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *ChainSum) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *ChainSum) SetChainId(v string) {
	o.ChainId = v
}

// GetApprovedSum returns the ApprovedSum field value
func (o *ChainSum) GetApprovedSum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApprovedSum
}

// GetApprovedSumOk returns a tuple with the ApprovedSum field value
// and a boolean to check if the value has been set.
func (o *ChainSum) GetApprovedSumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApprovedSum, true
}

// SetApprovedSum sets field value
func (o *ChainSum) SetApprovedSum(v string) {
	o.ApprovedSum = v
}

// GetValueAtRiskSum returns the ValueAtRiskSum field value
func (o *ChainSum) GetValueAtRiskSum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueAtRiskSum
}

// GetValueAtRiskSumOk returns a tuple with the ValueAtRiskSum field value
// and a boolean to check if the value has been set.
func (o *ChainSum) GetValueAtRiskSumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueAtRiskSum, true
}

// SetValueAtRiskSum sets field value
func (o *ChainSum) SetValueAtRiskSum(v string) {
	o.ValueAtRiskSum = v
}

func (o ChainSum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainSum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chainId"] = o.ChainId
	toSerialize["approvedSum"] = o.ApprovedSum
	toSerialize["valueAtRiskSum"] = o.ValueAtRiskSum
	return toSerialize, nil
}

func (o *ChainSum) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chainId",
		"approvedSum",
		"valueAtRiskSum",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChainSum := _ChainSum{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChainSum)

	if err != nil {
		return err
	}

	*o = ChainSum(varChainSum)

	return err
}

type NullableChainSum struct {
	value *ChainSum
	isSet bool
}

func (v NullableChainSum) Get() *ChainSum {
	return v.value
}

func (v *NullableChainSum) Set(val *ChainSum) {
	v.value = val
	v.isSet = true
}

func (v NullableChainSum) IsSet() bool {
	return v.isSet
}

func (v *NullableChainSum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainSum(val *ChainSum) *NullableChainSum {
	return &NullableChainSum{value: val, isSet: true}
}

func (v NullableChainSum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainSum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


