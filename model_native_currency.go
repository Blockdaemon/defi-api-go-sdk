/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NativeCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NativeCurrency{}

// NativeCurrency The native token of a blockchain.
type NativeCurrency struct {
	// Name of the native token.
	Name string `json:"name"`
	// Symbol of the native token.
	Symbol string `json:"symbol"`
	// Number of decimal places used by the native token.
	Decimals int32 `json:"decimals"`
	// URL of the native token icon.
	Icon *string `json:"icon,omitempty"`
}

type _NativeCurrency NativeCurrency

// NewNativeCurrency instantiates a new NativeCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNativeCurrency(name string, symbol string, decimals int32) *NativeCurrency {
	this := NativeCurrency{}
	this.Name = name
	this.Symbol = symbol
	this.Decimals = decimals
	return &this
}

// NewNativeCurrencyWithDefaults instantiates a new NativeCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNativeCurrencyWithDefaults() *NativeCurrency {
	this := NativeCurrency{}
	return &this
}

// GetName returns the Name field value
func (o *NativeCurrency) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NativeCurrency) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NativeCurrency) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *NativeCurrency) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *NativeCurrency) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *NativeCurrency) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimals returns the Decimals field value
func (o *NativeCurrency) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *NativeCurrency) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *NativeCurrency) SetDecimals(v int32) {
	o.Decimals = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *NativeCurrency) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NativeCurrency) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *NativeCurrency) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *NativeCurrency) SetIcon(v string) {
	o.Icon = &v
}

func (o NativeCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NativeCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["decimals"] = o.Decimals
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

func (o *NativeCurrency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"symbol",
		"decimals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNativeCurrency := _NativeCurrency{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNativeCurrency)

	if err != nil {
		return err
	}

	*o = NativeCurrency(varNativeCurrency)

	return err
}

type NullableNativeCurrency struct {
	value *NativeCurrency
	isSet bool
}

func (v NullableNativeCurrency) Get() *NativeCurrency {
	return v.value
}

func (v *NullableNativeCurrency) Set(val *NativeCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableNativeCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableNativeCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNativeCurrency(val *NativeCurrency) *NullableNativeCurrency {
	return &NullableNativeCurrency{value: val, isSet: true}
}

func (v NullableNativeCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNativeCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


