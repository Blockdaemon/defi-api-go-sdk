/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountSum type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSum{}

// AccountSum The sum of approved values for an account across all tokens.
type AccountSum struct {
	// The address of an account.
	Address string `json:"address"`
	// The amount of a token represented as a string.
	ApprovedSum string `json:"approvedSum" validate:"regexp=^([1-9][0-9]*|0)(\\\\.[0-9]+)?$"`
	// The amount of a token represented as a string.
	ValueAtRiskSum string `json:"valueAtRiskSum" validate:"regexp=^([1-9][0-9]*|0)(\\\\.[0-9]+)?$"`
}

type _AccountSum AccountSum

// NewAccountSum instantiates a new AccountSum object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSum(address string, approvedSum string, valueAtRiskSum string) *AccountSum {
	this := AccountSum{}
	this.Address = address
	this.ApprovedSum = approvedSum
	this.ValueAtRiskSum = valueAtRiskSum
	return &this
}

// NewAccountSumWithDefaults instantiates a new AccountSum object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSumWithDefaults() *AccountSum {
	this := AccountSum{}
	return &this
}

// GetAddress returns the Address field value
func (o *AccountSum) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AccountSum) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AccountSum) SetAddress(v string) {
	o.Address = v
}

// GetApprovedSum returns the ApprovedSum field value
func (o *AccountSum) GetApprovedSum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApprovedSum
}

// GetApprovedSumOk returns a tuple with the ApprovedSum field value
// and a boolean to check if the value has been set.
func (o *AccountSum) GetApprovedSumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApprovedSum, true
}

// SetApprovedSum sets field value
func (o *AccountSum) SetApprovedSum(v string) {
	o.ApprovedSum = v
}

// GetValueAtRiskSum returns the ValueAtRiskSum field value
func (o *AccountSum) GetValueAtRiskSum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueAtRiskSum
}

// GetValueAtRiskSumOk returns a tuple with the ValueAtRiskSum field value
// and a boolean to check if the value has been set.
func (o *AccountSum) GetValueAtRiskSumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueAtRiskSum, true
}

// SetValueAtRiskSum sets field value
func (o *AccountSum) SetValueAtRiskSum(v string) {
	o.ValueAtRiskSum = v
}

func (o AccountSum) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSum) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["approvedSum"] = o.ApprovedSum
	toSerialize["valueAtRiskSum"] = o.ValueAtRiskSum
	return toSerialize, nil
}

func (o *AccountSum) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"approvedSum",
		"valueAtRiskSum",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountSum := _AccountSum{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountSum)

	if err != nil {
		return err
	}

	*o = AccountSum(varAccountSum)

	return err
}

type NullableAccountSum struct {
	value *AccountSum
	isSet bool
}

func (v NullableAccountSum) Get() *AccountSum {
	return v.value
}

func (v *NullableAccountSum) Set(val *AccountSum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSum(val *AccountSum) *NullableAccountSum {
	return &NullableAccountSum{value: val, isSet: true}
}

func (v NullableAccountSum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


