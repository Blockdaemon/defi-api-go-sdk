/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeeCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeeCost{}

// FeeCost The maximum allowed price slippage for the transaction, as a decimal fraction.
type FeeCost struct {
	// Name of the fee cost.
	Name string `json:"name"`
	// Description of the fee cost.
	Description string `json:"description"`
	Token TokenAmount `json:"token"`
	// Flag indicating if the fee cost is included in the fromAmount. If true, the fee will be deducted from the fromAmount to calculate the final toAmount. If false, the fee needs to be payed on top of the fromAmount.
	Included bool `json:"included"`
}

type _FeeCost FeeCost

// NewFeeCost instantiates a new FeeCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeCost(name string, description string, token TokenAmount, included bool) *FeeCost {
	this := FeeCost{}
	this.Name = name
	this.Description = description
	this.Token = token
	this.Included = included
	return &this
}

// NewFeeCostWithDefaults instantiates a new FeeCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeCostWithDefaults() *FeeCost {
	this := FeeCost{}
	return &this
}

// GetName returns the Name field value
func (o *FeeCost) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FeeCost) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FeeCost) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *FeeCost) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FeeCost) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FeeCost) SetDescription(v string) {
	o.Description = v
}

// GetToken returns the Token field value
func (o *FeeCost) GetToken() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *FeeCost) GetTokenOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *FeeCost) SetToken(v TokenAmount) {
	o.Token = v
}

// GetIncluded returns the Included field value
func (o *FeeCost) GetIncluded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Included
}

// GetIncludedOk returns a tuple with the Included field value
// and a boolean to check if the value has been set.
func (o *FeeCost) GetIncludedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Included, true
}

// SetIncluded sets field value
func (o *FeeCost) SetIncluded(v bool) {
	o.Included = v
}

func (o FeeCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeeCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["token"] = o.Token
	toSerialize["included"] = o.Included
	return toSerialize, nil
}

func (o *FeeCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"token",
		"included",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeeCost := _FeeCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeeCost)

	if err != nil {
		return err
	}

	*o = FeeCost(varFeeCost)

	return err
}

type NullableFeeCost struct {
	value *FeeCost
	isSet bool
}

func (v NullableFeeCost) Get() *FeeCost {
	return v.value
}

func (v *NullableFeeCost) Set(val *FeeCost) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeCost) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeCost(val *FeeCost) *NullableFeeCost {
	return &NullableFeeCost{value: val, isSet: true}
}

func (v NullableFeeCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


