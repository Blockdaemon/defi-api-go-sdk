/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

// Route Details about a route for swapping tokens, including the steps involved.
type Route struct {
	// A unique identifier for a plugin or sub-component.
	TargetID string `json:"targetID"`
	From TokenAmount `json:"from"`
	To TokenAmount `json:"to"`
	// The amount of a token represented as a decimal number.
	Slippage *float32 `json:"slippage,omitempty"`
	Steps IncludedSteps `json:"steps"`
	TransactionRequest TransactionRequest `json:"transactionRequest"`
	// Additional metadata about the route.
	Extensions *map[string]string `json:"extensions,omitempty"`
}

type _Route Route

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute(targetID string, from TokenAmount, to TokenAmount, steps IncludedSteps, transactionRequest TransactionRequest) *Route {
	this := Route{}
	this.TargetID = targetID
	this.From = from
	this.To = to
	this.Steps = steps
	this.TransactionRequest = transactionRequest
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetTargetID returns the TargetID field value
func (o *Route) GetTargetID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetID
}

// GetTargetIDOk returns a tuple with the TargetID field value
// and a boolean to check if the value has been set.
func (o *Route) GetTargetIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetID, true
}

// SetTargetID sets field value
func (o *Route) SetTargetID(v string) {
	o.TargetID = v
}

// GetFrom returns the From field value
func (o *Route) GetFrom() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *Route) GetFromOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *Route) SetFrom(v TokenAmount) {
	o.From = v
}

// GetTo returns the To field value
func (o *Route) GetTo() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Route) GetToOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Route) SetTo(v TokenAmount) {
	o.To = v
}

// GetSlippage returns the Slippage field value if set, zero value otherwise.
func (o *Route) GetSlippage() float32 {
	if o == nil || IsNil(o.Slippage) {
		var ret float32
		return ret
	}
	return *o.Slippage
}

// GetSlippageOk returns a tuple with the Slippage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetSlippageOk() (*float32, bool) {
	if o == nil || IsNil(o.Slippage) {
		return nil, false
	}
	return o.Slippage, true
}

// HasSlippage returns a boolean if a field has been set.
func (o *Route) HasSlippage() bool {
	if o != nil && !IsNil(o.Slippage) {
		return true
	}

	return false
}

// SetSlippage gets a reference to the given float32 and assigns it to the Slippage field.
func (o *Route) SetSlippage(v float32) {
	o.Slippage = &v
}

// GetSteps returns the Steps field value
func (o *Route) GetSteps() IncludedSteps {
	if o == nil {
		var ret IncludedSteps
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *Route) GetStepsOk() (*IncludedSteps, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Steps, true
}

// SetSteps sets field value
func (o *Route) SetSteps(v IncludedSteps) {
	o.Steps = v
}

// GetTransactionRequest returns the TransactionRequest field value
func (o *Route) GetTransactionRequest() TransactionRequest {
	if o == nil {
		var ret TransactionRequest
		return ret
	}

	return o.TransactionRequest
}

// GetTransactionRequestOk returns a tuple with the TransactionRequest field value
// and a boolean to check if the value has been set.
func (o *Route) GetTransactionRequestOk() (*TransactionRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionRequest, true
}

// SetTransactionRequest sets field value
func (o *Route) SetTransactionRequest(v TransactionRequest) {
	o.TransactionRequest = v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Route) GetExtensions() map[string]string {
	if o == nil || IsNil(o.Extensions) {
		var ret map[string]string
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetExtensionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Route) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given map[string]string and assigns it to the Extensions field.
func (o *Route) SetExtensions(v map[string]string) {
	o.Extensions = &v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetID"] = o.TargetID
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if !IsNil(o.Slippage) {
		toSerialize["slippage"] = o.Slippage
	}
	toSerialize["steps"] = o.Steps
	toSerialize["transactionRequest"] = o.TransactionRequest
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	return toSerialize, nil
}

func (o *Route) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetID",
		"from",
		"to",
		"steps",
		"transactionRequest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoute := _Route{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoute)

	if err != nil {
		return err
	}

	*o = Route(varRoute)

	return err
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


