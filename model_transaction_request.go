/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionRequest{}

// TransactionRequest The details of a transaction request to be signed.
type TransactionRequest struct {
	// Data for smart contract interactions.
	Data string `json:"data"`
	// The address of an account.
	To string `json:"to"`
	// The value of native token transfered in this transaction in hexadecimal wei.
	Value string `json:"value"`
	// The address of an account.
	From string `json:"from"`
	// The unique identifier of a blockchain in CAIP-2 notation.
	ChainID string `json:"chainID" validate:"regexp=^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$"`
	// The CAIP-2 identifier for a blockchain.
	GasLimit int32 `json:"gasLimit"`
}

type _TransactionRequest TransactionRequest

// NewTransactionRequest instantiates a new TransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionRequest(data string, to string, value string, from string, chainID string, gasLimit int32) *TransactionRequest {
	this := TransactionRequest{}
	this.Data = data
	this.To = to
	this.Value = value
	this.From = from
	this.ChainID = chainID
	this.GasLimit = gasLimit
	return &this
}

// NewTransactionRequestWithDefaults instantiates a new TransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionRequestWithDefaults() *TransactionRequest {
	this := TransactionRequest{}
	return &this
}

// GetData returns the Data field value
func (o *TransactionRequest) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *TransactionRequest) SetData(v string) {
	o.Data = v
}

// GetTo returns the To field value
func (o *TransactionRequest) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *TransactionRequest) SetTo(v string) {
	o.To = v
}

// GetValue returns the Value field value
func (o *TransactionRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TransactionRequest) SetValue(v string) {
	o.Value = v
}

// GetFrom returns the From field value
func (o *TransactionRequest) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *TransactionRequest) SetFrom(v string) {
	o.From = v
}

// GetChainID returns the ChainID field value
func (o *TransactionRequest) GetChainID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainID
}

// GetChainIDOk returns a tuple with the ChainID field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetChainIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainID, true
}

// SetChainID sets field value
func (o *TransactionRequest) SetChainID(v string) {
	o.ChainID = v
}

// GetGasLimit returns the GasLimit field value
func (o *TransactionRequest) GetGasLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value
// and a boolean to check if the value has been set.
func (o *TransactionRequest) GetGasLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimit, true
}

// SetGasLimit sets field value
func (o *TransactionRequest) SetGasLimit(v int32) {
	o.GasLimit = v
}

func (o TransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["to"] = o.To
	toSerialize["value"] = o.Value
	toSerialize["from"] = o.From
	toSerialize["chainID"] = o.ChainID
	toSerialize["gasLimit"] = o.GasLimit
	return toSerialize, nil
}

func (o *TransactionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"to",
		"value",
		"from",
		"chainID",
		"gasLimit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionRequest := _TransactionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionRequest)

	if err != nil {
		return err
	}

	*o = TransactionRequest(varTransactionRequest)

	return err
}

type NullableTransactionRequest struct {
	value *TransactionRequest
	isSet bool
}

func (v NullableTransactionRequest) Get() *TransactionRequest {
	return v.value
}

func (v *NullableTransactionRequest) Set(val *TransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionRequest(val *TransactionRequest) *NullableTransactionRequest {
	return &NullableTransactionRequest{value: val, isSet: true}
}

func (v NullableTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


