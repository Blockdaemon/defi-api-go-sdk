/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.43.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transfer{}

// Transfer Details about a token transfer within a transaction.
type Transfer struct {
	TokenAmount TokenAmount `json:"tokenAmount"`
	FromAccount Account `json:"fromAccount"`
	ToAccount Account `json:"toAccount"`
	Type TransferType `json:"type"`
}

type _Transfer Transfer

// NewTransfer instantiates a new Transfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfer(tokenAmount TokenAmount, fromAccount Account, toAccount Account, type_ TransferType) *Transfer {
	this := Transfer{}
	this.TokenAmount = tokenAmount
	this.FromAccount = fromAccount
	this.ToAccount = toAccount
	this.Type = type_
	return &this
}

// NewTransferWithDefaults instantiates a new Transfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferWithDefaults() *Transfer {
	this := Transfer{}
	return &this
}

// GetTokenAmount returns the TokenAmount field value
func (o *Transfer) GetTokenAmount() TokenAmount {
	if o == nil {
		var ret TokenAmount
		return ret
	}

	return o.TokenAmount
}

// GetTokenAmountOk returns a tuple with the TokenAmount field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTokenAmountOk() (*TokenAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAmount, true
}

// SetTokenAmount sets field value
func (o *Transfer) SetTokenAmount(v TokenAmount) {
	o.TokenAmount = v
}

// GetFromAccount returns the FromAccount field value
func (o *Transfer) GetFromAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetFromAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAccount, true
}

// SetFromAccount sets field value
func (o *Transfer) SetFromAccount(v Account) {
	o.FromAccount = v
}

// GetToAccount returns the ToAccount field value
func (o *Transfer) GetToAccount() Account {
	if o == nil {
		var ret Account
		return ret
	}

	return o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetToAccountOk() (*Account, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAccount, true
}

// SetToAccount sets field value
func (o *Transfer) SetToAccount(v Account) {
	o.ToAccount = v
}

// GetType returns the Type field value
func (o *Transfer) GetType() TransferType {
	if o == nil {
		var ret TransferType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTypeOk() (*TransferType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transfer) SetType(v TransferType) {
	o.Type = v
}

func (o Transfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tokenAmount"] = o.TokenAmount
	toSerialize["fromAccount"] = o.FromAccount
	toSerialize["toAccount"] = o.ToAccount
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Transfer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tokenAmount",
		"fromAccount",
		"toAccount",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransfer := _Transfer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransfer)

	if err != nil {
		return err
	}

	*o = Transfer(varTransfer)

	return err
}

type NullableTransfer struct {
	value *Transfer
	isSet bool
}

func (v NullableTransfer) Get() *Transfer {
	return v.value
}

func (v *NullableTransfer) Set(val *Transfer) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfer(val *Transfer) *NullableTransfer {
	return &NullableTransfer{value: val, isSet: true}
}

func (v NullableTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


