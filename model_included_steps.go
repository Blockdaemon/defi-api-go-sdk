/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IncludedSteps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncludedSteps{}

// IncludedSteps A list of all steps included in a route.
type IncludedSteps struct {
}

// NewIncludedSteps instantiates a new IncludedSteps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncludedSteps() *IncludedSteps {
	this := IncludedSteps{}
	return &this
}

// NewIncludedStepsWithDefaults instantiates a new IncludedSteps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncludedStepsWithDefaults() *IncludedSteps {
	this := IncludedSteps{}
	return &this
}

func (o IncludedSteps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncludedSteps) ToMap() (map[string]interface{}, error) {
	toSerialize := make([]interface{}, len(o.Items))
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	return toSerialize, nil
}

func (o *IncludedSteps) UnmarshalJSON(data []byte) (err error) {
	return json.Unmarshal(data, &o.Items)
}

type NullableIncludedSteps struct {
	value IncludedSteps
	isSet bool
}

func (v NullableIncludedSteps) Get() IncludedSteps {
	return v.value
}

func (v *NullableIncludedSteps) Set(val IncludedSteps) {
	v.value = val
	v.isSet = true
}

func (v NullableIncludedSteps) IsSet() bool {
	return v.isSet
}

func (v *NullableIncludedSteps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncludedSteps(val IncludedSteps) *NullableIncludedSteps {
	return &NullableIncludedSteps{value: val, isSet: true}
}

func (v NullableIncludedSteps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncludedSteps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


