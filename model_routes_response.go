/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoutesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutesResponse{}

// RoutesResponse A response containing available and unavailable routes for swapping tokens.
type RoutesResponse struct {
	Routes Routes `json:"routes"`
}

type _RoutesResponse RoutesResponse

// NewRoutesResponse instantiates a new RoutesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesResponse(routes Routes) *RoutesResponse {
	this := RoutesResponse{}
	this.Routes = routes
	return &this
}

// NewRoutesResponseWithDefaults instantiates a new RoutesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesResponseWithDefaults() *RoutesResponse {
	this := RoutesResponse{}
	return &this
}

// GetRoutes returns the Routes field value
func (o *RoutesResponse) GetRoutes() Routes {
	if o == nil {
		var ret Routes
		return ret
	}

	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value
// and a boolean to check if the value has been set.
func (o *RoutesResponse) GetRoutesOk() (*Routes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Routes, true
}

// SetRoutes sets field value
func (o *RoutesResponse) SetRoutes(v Routes) {
	o.Routes = v
}

func (o RoutesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routes"] = o.Routes
	return toSerialize, nil
}

func (o *RoutesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutesResponse := _RoutesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutesResponse)

	if err != nil {
		return err
	}

	*o = RoutesResponse(varRoutesResponse)

	return err
}

type NullableRoutesResponse struct {
	value *RoutesResponse
	isSet bool
}

func (v NullableRoutesResponse) Get() *RoutesResponse {
	return v.value
}

func (v *NullableRoutesResponse) Set(val *RoutesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesResponse(val *RoutesResponse) *NullableRoutesResponse {
	return &NullableRoutesResponse{value: val, isSet: true}
}

func (v NullableRoutesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


