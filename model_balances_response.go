/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BalancesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalancesResponse{}

// BalancesResponse A response containing token balances for an account across multiple chains.
type BalancesResponse struct {
	// The address of an account.
	Account *string `json:"account,omitempty"`
	Balances []ChainBalance `json:"balances"`
	// Array of chain IDs for which balances are missing
	HasMissingBalances []string `json:"hasMissingBalances,omitempty"`
}

type _BalancesResponse BalancesResponse

// NewBalancesResponse instantiates a new BalancesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalancesResponse(balances []ChainBalance) *BalancesResponse {
	this := BalancesResponse{}
	this.Balances = balances
	return &this
}

// NewBalancesResponseWithDefaults instantiates a new BalancesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalancesResponseWithDefaults() *BalancesResponse {
	this := BalancesResponse{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *BalancesResponse) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesResponse) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *BalancesResponse) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *BalancesResponse) SetAccount(v string) {
	o.Account = &v
}

// GetBalances returns the Balances field value
func (o *BalancesResponse) GetBalances() []ChainBalance {
	if o == nil {
		var ret []ChainBalance
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *BalancesResponse) GetBalancesOk() ([]ChainBalance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Balances, true
}

// SetBalances sets field value
func (o *BalancesResponse) SetBalances(v []ChainBalance) {
	o.Balances = v
}

// GetHasMissingBalances returns the HasMissingBalances field value if set, zero value otherwise.
func (o *BalancesResponse) GetHasMissingBalances() []string {
	if o == nil || IsNil(o.HasMissingBalances) {
		var ret []string
		return ret
	}
	return o.HasMissingBalances
}

// GetHasMissingBalancesOk returns a tuple with the HasMissingBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalancesResponse) GetHasMissingBalancesOk() ([]string, bool) {
	if o == nil || IsNil(o.HasMissingBalances) {
		return nil, false
	}
	return o.HasMissingBalances, true
}

// HasHasMissingBalances returns a boolean if a field has been set.
func (o *BalancesResponse) HasHasMissingBalances() bool {
	if o != nil && !IsNil(o.HasMissingBalances) {
		return true
	}

	return false
}

// SetHasMissingBalances gets a reference to the given []string and assigns it to the HasMissingBalances field.
func (o *BalancesResponse) SetHasMissingBalances(v []string) {
	o.HasMissingBalances = v
}

func (o BalancesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalancesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	toSerialize["balances"] = o.Balances
	if !IsNil(o.HasMissingBalances) {
		toSerialize["hasMissingBalances"] = o.HasMissingBalances
	}
	return toSerialize, nil
}

func (o *BalancesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"balances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBalancesResponse := _BalancesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBalancesResponse)

	if err != nil {
		return err
	}

	*o = BalancesResponse(varBalancesResponse)

	return err
}

type NullableBalancesResponse struct {
	value *BalancesResponse
	isSet bool
}

func (v NullableBalancesResponse) Get() *BalancesResponse {
	return v.value
}

func (v *NullableBalancesResponse) Set(val *BalancesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancesResponse(val *BalancesResponse) *NullableBalancesResponse {
	return &NullableBalancesResponse{value: val, isSet: true}
}

func (v NullableBalancesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


