/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IncludedStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncludedStep{}

// IncludedStep Details about an individual step in a route.
type IncludedStep struct {
	// Type of the step, such as 'swap' or 'cross'.
	Type string `json:"type"`
	Action Action `json:"action"`
	Estimate Estimate `json:"estimate"`
	IntegrationDetails IntegrationDetails `json:"integrationDetails"`
}

type _IncludedStep IncludedStep

// NewIncludedStep instantiates a new IncludedStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncludedStep(type_ string, action Action, estimate Estimate, integrationDetails IntegrationDetails) *IncludedStep {
	this := IncludedStep{}
	this.Type = type_
	this.Action = action
	this.Estimate = estimate
	this.IntegrationDetails = integrationDetails
	return &this
}

// NewIncludedStepWithDefaults instantiates a new IncludedStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncludedStepWithDefaults() *IncludedStep {
	this := IncludedStep{}
	return &this
}

// GetType returns the Type field value
func (o *IncludedStep) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IncludedStep) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IncludedStep) SetType(v string) {
	o.Type = v
}

// GetAction returns the Action field value
func (o *IncludedStep) GetAction() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *IncludedStep) GetActionOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *IncludedStep) SetAction(v Action) {
	o.Action = v
}

// GetEstimate returns the Estimate field value
func (o *IncludedStep) GetEstimate() Estimate {
	if o == nil {
		var ret Estimate
		return ret
	}

	return o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value
// and a boolean to check if the value has been set.
func (o *IncludedStep) GetEstimateOk() (*Estimate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Estimate, true
}

// SetEstimate sets field value
func (o *IncludedStep) SetEstimate(v Estimate) {
	o.Estimate = v
}

// GetIntegrationDetails returns the IntegrationDetails field value
func (o *IncludedStep) GetIntegrationDetails() IntegrationDetails {
	if o == nil {
		var ret IntegrationDetails
		return ret
	}

	return o.IntegrationDetails
}

// GetIntegrationDetailsOk returns a tuple with the IntegrationDetails field value
// and a boolean to check if the value has been set.
func (o *IncludedStep) GetIntegrationDetailsOk() (*IntegrationDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationDetails, true
}

// SetIntegrationDetails sets field value
func (o *IncludedStep) SetIntegrationDetails(v IntegrationDetails) {
	o.IntegrationDetails = v
}

func (o IncludedStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncludedStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["action"] = o.Action
	toSerialize["estimate"] = o.Estimate
	toSerialize["integrationDetails"] = o.IntegrationDetails
	return toSerialize, nil
}

func (o *IncludedStep) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"action",
		"estimate",
		"integrationDetails",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIncludedStep := _IncludedStep{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIncludedStep)

	if err != nil {
		return err
	}

	*o = IncludedStep(varIncludedStep)

	return err
}

type NullableIncludedStep struct {
	value *IncludedStep
	isSet bool
}

func (v NullableIncludedStep) Get() *IncludedStep {
	return v.value
}

func (v *NullableIncludedStep) Set(val *IncludedStep) {
	v.value = val
	v.isSet = true
}

func (v NullableIncludedStep) IsSet() bool {
	return v.isSet
}

func (v *NullableIncludedStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncludedStep(val *IncludedStep) *NullableIncludedStep {
	return &NullableIncludedStep{value: val, isSet: true}
}

func (v NullableIncludedStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncludedStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


