/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Extensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extensions{}

// Extensions Additional metadata about a token.
type Extensions struct {
	// Describes whether the token data has been verified by Blockdaemon
	Verified *bool `json:"verified,omitempty"`
	// The homepage of the token issuer
	Homepage *string `json:"homepage,omitempty"`
	Unknown *bool `json:"unknown,omitempty"`
}

// NewExtensions instantiates a new Extensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensions() *Extensions {
	this := Extensions{}
	return &this
}

// NewExtensionsWithDefaults instantiates a new Extensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionsWithDefaults() *Extensions {
	this := Extensions{}
	return &this
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *Extensions) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensions) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *Extensions) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *Extensions) SetVerified(v bool) {
	o.Verified = &v
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *Extensions) GetHomepage() string {
	if o == nil || IsNil(o.Homepage) {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensions) GetHomepageOk() (*string, bool) {
	if o == nil || IsNil(o.Homepage) {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *Extensions) HasHomepage() bool {
	if o != nil && !IsNil(o.Homepage) {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *Extensions) SetHomepage(v string) {
	o.Homepage = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *Extensions) GetUnknown() bool {
	if o == nil || IsNil(o.Unknown) {
		var ret bool
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extensions) GetUnknownOk() (*bool, bool) {
	if o == nil || IsNil(o.Unknown) {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *Extensions) HasUnknown() bool {
	if o != nil && !IsNil(o.Unknown) {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given bool and assigns it to the Unknown field.
func (o *Extensions) SetUnknown(v bool) {
	o.Unknown = &v
}

func (o Extensions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if !IsNil(o.Homepage) {
		toSerialize["homepage"] = o.Homepage
	}
	if !IsNil(o.Unknown) {
		toSerialize["unknown"] = o.Unknown
	}
	return toSerialize, nil
}

type NullableExtensions struct {
	value *Extensions
	isSet bool
}

func (v NullableExtensions) Get() *Extensions {
	return v.value
}

func (v *NullableExtensions) Set(val *Extensions) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensions) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensions(val *Extensions) *NullableExtensions {
	return &NullableExtensions{value: val, isSet: true}
}

func (v NullableExtensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


