/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GasDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GasDetails{}

// GasDetails Detailed information about gas usage in a transaction.
type GasDetails struct {
	Token Token `json:"token"`
	// The gas limit provided by the sender.
	Gas int32 `json:"gas"`
	// The amount of gas used by the transaction.
	GasUsed int32 `json:"gasUsed"`
	// The amount of a token represented as a string.
	GasPrice string `json:"gasPrice" validate:"regexp=^([1-9][0-9]*|0)(\\\\.[0-9]+)?$"`
	// The price of an asset, coin, or token.
	GasUSD *float64 `json:"gasUSD,omitempty"`
	// The priority fee (tip) paid to miners.
	PriorityFee string `json:"priorityFee"`
	// The base fee per gas unit, applicable in EIP-1559 transactions.
	BaseFee string `json:"baseFee"`
}

type _GasDetails GasDetails

// NewGasDetails instantiates a new GasDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGasDetails(token Token, gas int32, gasUsed int32, gasPrice string, priorityFee string, baseFee string) *GasDetails {
	this := GasDetails{}
	this.Token = token
	this.Gas = gas
	this.GasUsed = gasUsed
	this.GasPrice = gasPrice
	this.PriorityFee = priorityFee
	this.BaseFee = baseFee
	return &this
}

// NewGasDetailsWithDefaults instantiates a new GasDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGasDetailsWithDefaults() *GasDetails {
	this := GasDetails{}
	return &this
}

// GetToken returns the Token field value
func (o *GasDetails) GetToken() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *GasDetails) GetTokenOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *GasDetails) SetToken(v Token) {
	o.Token = v
}

// GetGas returns the Gas field value
func (o *GasDetails) GetGas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Gas
}

// GetGasOk returns a tuple with the Gas field value
// and a boolean to check if the value has been set.
func (o *GasDetails) GetGasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gas, true
}

// SetGas sets field value
func (o *GasDetails) SetGas(v int32) {
	o.Gas = v
}

// GetGasUsed returns the GasUsed field value
func (o *GasDetails) GetGasUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value
// and a boolean to check if the value has been set.
func (o *GasDetails) GetGasUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasUsed, true
}

// SetGasUsed sets field value
func (o *GasDetails) SetGasUsed(v int32) {
	o.GasUsed = v
}

// GetGasPrice returns the GasPrice field value
func (o *GasDetails) GetGasPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value
// and a boolean to check if the value has been set.
func (o *GasDetails) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasPrice, true
}

// SetGasPrice sets field value
func (o *GasDetails) SetGasPrice(v string) {
	o.GasPrice = v
}

// GetGasUSD returns the GasUSD field value if set, zero value otherwise.
func (o *GasDetails) GetGasUSD() float64 {
	if o == nil || IsNil(o.GasUSD) {
		var ret float64
		return ret
	}
	return *o.GasUSD
}

// GetGasUSDOk returns a tuple with the GasUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasDetails) GetGasUSDOk() (*float64, bool) {
	if o == nil || IsNil(o.GasUSD) {
		return nil, false
	}
	return o.GasUSD, true
}

// HasGasUSD returns a boolean if a field has been set.
func (o *GasDetails) HasGasUSD() bool {
	if o != nil && !IsNil(o.GasUSD) {
		return true
	}

	return false
}

// SetGasUSD gets a reference to the given float64 and assigns it to the GasUSD field.
func (o *GasDetails) SetGasUSD(v float64) {
	o.GasUSD = &v
}

// GetPriorityFee returns the PriorityFee field value
func (o *GasDetails) GetPriorityFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriorityFee
}

// GetPriorityFeeOk returns a tuple with the PriorityFee field value
// and a boolean to check if the value has been set.
func (o *GasDetails) GetPriorityFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriorityFee, true
}

// SetPriorityFee sets field value
func (o *GasDetails) SetPriorityFee(v string) {
	o.PriorityFee = v
}

// GetBaseFee returns the BaseFee field value
func (o *GasDetails) GetBaseFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseFee
}

// GetBaseFeeOk returns a tuple with the BaseFee field value
// and a boolean to check if the value has been set.
func (o *GasDetails) GetBaseFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseFee, true
}

// SetBaseFee sets field value
func (o *GasDetails) SetBaseFee(v string) {
	o.BaseFee = v
}

func (o GasDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GasDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	toSerialize["gas"] = o.Gas
	toSerialize["gasUsed"] = o.GasUsed
	toSerialize["gasPrice"] = o.GasPrice
	if !IsNil(o.GasUSD) {
		toSerialize["gasUSD"] = o.GasUSD
	}
	toSerialize["priorityFee"] = o.PriorityFee
	toSerialize["baseFee"] = o.BaseFee
	return toSerialize, nil
}

func (o *GasDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
		"gas",
		"gasUsed",
		"gasPrice",
		"priorityFee",
		"baseFee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGasDetails := _GasDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGasDetails)

	if err != nil {
		return err
	}

	*o = GasDetails(varGasDetails)

	return err
}

type NullableGasDetails struct {
	value *GasDetails
	isSet bool
}

func (v NullableGasDetails) Get() *GasDetails {
	return v.value
}

func (v *NullableGasDetails) Set(val *GasDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableGasDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableGasDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGasDetails(val *GasDetails) *NullableGasDetails {
	return &NullableGasDetails{value: val, isSet: true}
}

func (v NullableGasDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGasDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


