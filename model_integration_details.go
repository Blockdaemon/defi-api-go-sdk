/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntegrationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationDetails{}

// IntegrationDetails Details about a DeFi integration, such as a bridge or an exchange.
type IntegrationDetails struct {
	// A unique identifier for the integration.
	Key string `json:"key"`
	// The name of the integration.
	Name string `json:"name"`
	// URL to the integration's logo.
	LogoURI string `json:"logoURI"`
	// The type of the integration
	Type string `json:"type"`
}

type _IntegrationDetails IntegrationDetails

// NewIntegrationDetails instantiates a new IntegrationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationDetails(key string, name string, logoURI string, type_ string) *IntegrationDetails {
	this := IntegrationDetails{}
	this.Key = key
	this.Name = name
	this.LogoURI = logoURI
	this.Type = type_
	return &this
}

// NewIntegrationDetailsWithDefaults instantiates a new IntegrationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationDetailsWithDefaults() *IntegrationDetails {
	this := IntegrationDetails{}
	return &this
}

// GetKey returns the Key field value
func (o *IntegrationDetails) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *IntegrationDetails) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *IntegrationDetails) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *IntegrationDetails) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IntegrationDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IntegrationDetails) SetName(v string) {
	o.Name = v
}

// GetLogoURI returns the LogoURI field value
func (o *IntegrationDetails) GetLogoURI() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoURI
}

// GetLogoURIOk returns a tuple with the LogoURI field value
// and a boolean to check if the value has been set.
func (o *IntegrationDetails) GetLogoURIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoURI, true
}

// SetLogoURI sets field value
func (o *IntegrationDetails) SetLogoURI(v string) {
	o.LogoURI = v
}

// GetType returns the Type field value
func (o *IntegrationDetails) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IntegrationDetails) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IntegrationDetails) SetType(v string) {
	o.Type = v
}

func (o IntegrationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	toSerialize["logoURI"] = o.LogoURI
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *IntegrationDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"name",
		"logoURI",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationDetails := _IntegrationDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntegrationDetails)

	if err != nil {
		return err
	}

	*o = IntegrationDetails(varIntegrationDetails)

	return err
}

type NullableIntegrationDetails struct {
	value *IntegrationDetails
	isSet bool
}

func (v NullableIntegrationDetails) Get() *IntegrationDetails {
	return v.value
}

func (v *NullableIntegrationDetails) Set(val *IntegrationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationDetails(val *IntegrationDetails) *NullableIntegrationDetails {
	return &NullableIntegrationDetails{value: val, isSet: true}
}

func (v NullableIntegrationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


