/*
Blockdaemon DeFi API

The Blockdaemon DeFi API provides a single interface to a multitude of DeFi projects and blockchains

API version: 1.0.0
Contact: info@blockdaemon.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenAmount{}

// TokenAmount A token and its corresponding amount.
type TokenAmount struct {
	// The amount of a token represented as a string.
	Amount string `json:"amount" validate:"regexp=^([1-9][0-9]*|0)(\\\\.[0-9]+)?$"`
	// The amount of a token represented as a decimal number.
	AmountUSD *float32 `json:"amountUSD,omitempty"`
	Token Token `json:"token"`
}

type _TokenAmount TokenAmount

// NewTokenAmount instantiates a new TokenAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenAmount(amount string, token Token) *TokenAmount {
	this := TokenAmount{}
	this.Amount = amount
	this.Token = token
	return &this
}

// NewTokenAmountWithDefaults instantiates a new TokenAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenAmountWithDefaults() *TokenAmount {
	this := TokenAmount{}
	return &this
}

// GetAmount returns the Amount field value
func (o *TokenAmount) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TokenAmount) SetAmount(v string) {
	o.Amount = v
}

// GetAmountUSD returns the AmountUSD field value if set, zero value otherwise.
func (o *TokenAmount) GetAmountUSD() float32 {
	if o == nil || IsNil(o.AmountUSD) {
		var ret float32
		return ret
	}
	return *o.AmountUSD
}

// GetAmountUSDOk returns a tuple with the AmountUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetAmountUSDOk() (*float32, bool) {
	if o == nil || IsNil(o.AmountUSD) {
		return nil, false
	}
	return o.AmountUSD, true
}

// HasAmountUSD returns a boolean if a field has been set.
func (o *TokenAmount) HasAmountUSD() bool {
	if o != nil && !IsNil(o.AmountUSD) {
		return true
	}

	return false
}

// SetAmountUSD gets a reference to the given float32 and assigns it to the AmountUSD field.
func (o *TokenAmount) SetAmountUSD(v float32) {
	o.AmountUSD = &v
}

// GetToken returns the Token field value
func (o *TokenAmount) GetToken() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *TokenAmount) GetTokenOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *TokenAmount) SetToken(v Token) {
	o.Token = v
}

func (o TokenAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.AmountUSD) {
		toSerialize["amountUSD"] = o.AmountUSD
	}
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *TokenAmount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenAmount := _TokenAmount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenAmount)

	if err != nil {
		return err
	}

	*o = TokenAmount(varTokenAmount)

	return err
}

type NullableTokenAmount struct {
	value *TokenAmount
	isSet bool
}

func (v NullableTokenAmount) Get() *TokenAmount {
	return v.value
}

func (v *NullableTokenAmount) Set(val *TokenAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenAmount(val *TokenAmount) *NullableTokenAmount {
	return &NullableTokenAmount{value: val, isSet: true}
}

func (v NullableTokenAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


